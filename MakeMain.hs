module Main where

import Directory
import Time
import Data.List

main = do
          files <- getDirectoryContents "."
          clockTime <- getClockTime
          calendarTime <- toCalendarTime $ clockTime
          let modules = sort . map baseName $ filter isEulerModule files
          writeFile mainFile ""
          fileStrLn   "module Main where\n"
          fileStrLn   "-- DO NOT EDIT THIS FILE"
          fileStrLn $ "-- This file was generated by MakeMain on " ++ calendarTimeToString calendarTime ++ "\n"
          -- imports
          fileStrLn . unlines $ map ("import " ++) modules
          fileStrLn   "import System\n"
          fileStrLn   "main = do args' <- getArgs"
          fileStrLn   "          let args = map read args'\n"
          -- call problem implementations
          fileStrLn . unlines $ map (\x -> "          if null args || " ++ (drop 5 x) ++ " `elem` args\n" ++
                                           "            then do putStr $ \"Problem " ++ x ++ ": \"; e" ++ tail x ++ "; putStrLn \"\"\n" ++
                                           "            else putStr \"\"\n") modules
          putStrLn  $ mainFile ++ " generated, containing " ++ show (length modules) ++ " problems."
          where isEulerModule x = "sh" == ((take 2) . reverse) x && "Euler" == (take 5 x)
                baseName = takeWhile (/= '.')
                fileStrLn s = appendFile mainFile (s ++ "\n")
                mainFile = "Main.hs"
